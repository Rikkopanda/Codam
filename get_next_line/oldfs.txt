//printf("\tbuff %s\t", buff_ini);
//				printf("\tt_strdup %s\t", after_newline);
//printf("%s", (*list)->buffer);
//printf("%s", new_node->next = ft_lstnew(after_newlinestr));
//printf("\nbytes read %d\n", bytesread);
//ft_lstadd_back(list, );
//printf("reading line until newline or NULL\n");

	////i = 0;
	//	//while(i < 10)
	//	//{
	//		bytesread = read(fd, buff_str, 1);
	//		if(!bytesread)
	//			break ;
	//		//printf(" %d ", bytesread);
	//	//	strcat(buff_str, buff_str);
	//	//	i++;
	//	//}
	//	//printf("%s-", buff_str);
	//	//if(ft_strchr(buff_str, '\n') != NULL && ft_strlen(ft_strchr(buff_str, '\n')))
	//	//{
	//	//	after_newline = ft_strdup(ft_strchr(buff_str, '\n') + 1);
	//	//	clear_after_newline(buff_str);
	//	//	new_node = ft_lstnew(ft_strdup(buff_str));
	//	//}
	//	//else
	//		new_node = ft_lstnew(ft_strdup(buff_str));
	//	ft_lstadd_back(list, new_node);
	//	last_node = ft_lstlast(*list);
	void print_list(t_list **list)
{
	t_list *print;
	print = *list;
	int i;

	i = 0;
	while(print != NULL)
	{
		//printf("%s\n", print->buffer);
		print = print->next;
		i++;
	}
}

void clear_after_newline(char *str)
{
	int i;

	i = 0;
	while(str[i] != '\0')
	{
		if(str[i] == '\n')
		{
			i++;
			while(str[i] != '\0')
			{
				str[i] = '\0';
				i++;
			}
			return ;
		}
		i++;
	}
}

void make_new_list(t_list **list, char *after_newlinestr)
{
	char *place_str;

	place_str = ft_strdup(after_newlinestr);
	*list = ft_lstnew(place_str);
	free(after_newlinestr);
	after_newlinestr = 0;
}